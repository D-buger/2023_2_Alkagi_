// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: User.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tutorial {

  /// <summary>Holder for reflection information generated from User.proto</summary>
  public static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for User.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpVc2VyLnByb3RvEgh0dXRvcmlhbCJqCgRVc2VyEgsKA3VpZBgBIAIoBRIK",
            "CgJpZBgCIAIoCRIKCgJwdxgDIAIoCRIMCgRuaWNrGAQgASgJEg8KB2dhbWVO",
            "dW0YBSACKAUSDgoGd2luTnVtGAYgAigFEg4KBnJlcGxheRgHIAMoCQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.User), global::Tutorial.User.Parser, new[]{ "Uid", "Id", "Pw", "Nick", "GameNum", "WinNum", "Replay" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class User : pb::IMessage<User>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User(User other) : this() {
      _hasBits0 = other._hasBits0;
      uid_ = other.uid_;
      id_ = other.id_;
      pw_ = other.pw_;
      nick_ = other.nick_;
      gameNum_ = other.gameNum_;
      winNum_ = other.winNum_;
      replay_ = other.replay_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private readonly static int UidDefaultValue = 0;

    private int uid_;
    /// <summary>
    ///식별 id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Uid {
      get { if ((_hasBits0 & 1) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 1;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static string IdDefaultValue = "";

    private string id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "pw" field.</summary>
    public const int PwFieldNumber = 3;
    private readonly static string PwDefaultValue = "";

    private string pw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Pw {
      get { return pw_ ?? PwDefaultValue; }
      set {
        pw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "pw" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPw {
      get { return pw_ != null; }
    }
    /// <summary>Clears the value of the "pw" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPw() {
      pw_ = null;
    }

    /// <summary>Field number for the "nick" field.</summary>
    public const int NickFieldNumber = 4;
    private readonly static string NickDefaultValue = "";

    private string nick_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Nick {
      get { return nick_ ?? NickDefaultValue; }
      set {
        nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "nick" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNick {
      get { return nick_ != null; }
    }
    /// <summary>Clears the value of the "nick" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNick() {
      nick_ = null;
    }

    /// <summary>Field number for the "gameNum" field.</summary>
    public const int GameNumFieldNumber = 5;
    private readonly static int GameNumDefaultValue = 0;

    private int gameNum_;
    /// <summary>
    ///게임 플레이한 횟수
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameNum {
      get { if ((_hasBits0 & 2) != 0) { return gameNum_; } else { return GameNumDefaultValue; } }
      set {
        _hasBits0 |= 2;
        gameNum_ = value;
      }
    }
    /// <summary>Gets whether the "gameNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGameNum {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "gameNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGameNum() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "winNum" field.</summary>
    public const int WinNumFieldNumber = 6;
    private readonly static int WinNumDefaultValue = 0;

    private int winNum_;
    /// <summary>
    ///이긴 횟수
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinNum {
      get { if ((_hasBits0 & 4) != 0) { return winNum_; } else { return WinNumDefaultValue; } }
      set {
        _hasBits0 |= 4;
        winNum_ = value;
      }
    }
    /// <summary>Gets whether the "winNum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWinNum {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "winNum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWinNum() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "replay" field.</summary>
    public const int ReplayFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_replay_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> replay_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///리플레이 데이터
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Replay {
      get { return replay_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Id != other.Id) return false;
      if (Pw != other.Pw) return false;
      if (Nick != other.Nick) return false;
      if (GameNum != other.GameNum) return false;
      if (WinNum != other.WinNum) return false;
      if(!replay_.Equals(other.replay_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUid) hash ^= Uid.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasPw) hash ^= Pw.GetHashCode();
      if (HasNick) hash ^= Nick.GetHashCode();
      if (HasGameNum) hash ^= GameNum.GetHashCode();
      if (HasWinNum) hash ^= WinNum.GetHashCode();
      hash ^= replay_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HasPw) {
        output.WriteRawTag(26);
        output.WriteString(Pw);
      }
      if (HasNick) {
        output.WriteRawTag(34);
        output.WriteString(Nick);
      }
      if (HasGameNum) {
        output.WriteRawTag(40);
        output.WriteInt32(GameNum);
      }
      if (HasWinNum) {
        output.WriteRawTag(48);
        output.WriteInt32(WinNum);
      }
      replay_.WriteTo(output, _repeated_replay_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUid) {
        output.WriteRawTag(8);
        output.WriteInt32(Uid);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HasPw) {
        output.WriteRawTag(26);
        output.WriteString(Pw);
      }
      if (HasNick) {
        output.WriteRawTag(34);
        output.WriteString(Nick);
      }
      if (HasGameNum) {
        output.WriteRawTag(40);
        output.WriteInt32(GameNum);
      }
      if (HasWinNum) {
        output.WriteRawTag(48);
        output.WriteInt32(WinNum);
      }
      replay_.WriteTo(ref output, _repeated_replay_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasPw) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pw);
      }
      if (HasNick) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
      }
      if (HasGameNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameNum);
      }
      if (HasWinNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinNum);
      }
      size += replay_.CalculateSize(_repeated_replay_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPw) {
        Pw = other.Pw;
      }
      if (other.HasNick) {
        Nick = other.Nick;
      }
      if (other.HasGameNum) {
        GameNum = other.GameNum;
      }
      if (other.HasWinNum) {
        WinNum = other.WinNum;
      }
      replay_.Add(other.replay_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Pw = input.ReadString();
            break;
          }
          case 34: {
            Nick = input.ReadString();
            break;
          }
          case 40: {
            GameNum = input.ReadInt32();
            break;
          }
          case 48: {
            WinNum = input.ReadInt32();
            break;
          }
          case 58: {
            replay_.AddEntriesFrom(input, _repeated_replay_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uid = input.ReadInt32();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            Pw = input.ReadString();
            break;
          }
          case 34: {
            Nick = input.ReadString();
            break;
          }
          case 40: {
            GameNum = input.ReadInt32();
            break;
          }
          case 48: {
            WinNum = input.ReadInt32();
            break;
          }
          case 58: {
            replay_.AddEntriesFrom(ref input, _repeated_replay_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
